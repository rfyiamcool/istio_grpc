// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/call.proto

package call

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WhereType int32

const (
	WhereType_CACHE WhereType = 0
	WhereType_STORE WhereType = 1
)

var WhereType_name = map[int32]string{
	0: "CACHE",
	1: "STORE",
}

var WhereType_value = map[string]int32{
	"CACHE": 0,
	"STORE": 1,
}

func (x WhereType) String() string {
	return proto.EnumName(WhereType_name, int32(x))
}

func (WhereType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ec13d8191abce58, []int{0}
}

type NameReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameReq) Reset()         { *m = NameReq{} }
func (m *NameReq) String() string { return proto.CompactTextString(m) }
func (*NameReq) ProtoMessage()    {}
func (*NameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ec13d8191abce58, []int{0}
}

func (m *NameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameReq.Unmarshal(m, b)
}
func (m *NameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameReq.Marshal(b, m, deterministic)
}
func (m *NameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameReq.Merge(m, src)
}
func (m *NameReq) XXX_Size() int {
	return xxx_messageInfo_NameReq.Size(m)
}
func (m *NameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NameReq.DiscardUnknown(m)
}

var xxx_messageInfo_NameReq proto.InternalMessageInfo

type NameResp struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameResp) Reset()         { *m = NameResp{} }
func (m *NameResp) String() string { return proto.CompactTextString(m) }
func (*NameResp) ProtoMessage()    {}
func (*NameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ec13d8191abce58, []int{1}
}

func (m *NameResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameResp.Unmarshal(m, b)
}
func (m *NameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameResp.Marshal(b, m, deterministic)
}
func (m *NameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResp.Merge(m, src)
}
func (m *NameResp) XXX_Size() int {
	return xxx_messageInfo_NameResp.Size(m)
}
func (m *NameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResp.DiscardUnknown(m)
}

var xxx_messageInfo_NameResp proto.InternalMessageInfo

func (m *NameResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameResp) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type DataModel struct {
	Key                  string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Status               string    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Where                WhereType `protobuf:"varint,4,opt,name=where,proto3,enum=WhereType" json:"where,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DataModel) Reset()         { *m = DataModel{} }
func (m *DataModel) String() string { return proto.CompactTextString(m) }
func (*DataModel) ProtoMessage()    {}
func (*DataModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ec13d8191abce58, []int{2}
}

func (m *DataModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataModel.Unmarshal(m, b)
}
func (m *DataModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataModel.Marshal(b, m, deterministic)
}
func (m *DataModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataModel.Merge(m, src)
}
func (m *DataModel) XXX_Size() int {
	return xxx_messageInfo_DataModel.Size(m)
}
func (m *DataModel) XXX_DiscardUnknown() {
	xxx_messageInfo_DataModel.DiscardUnknown(m)
}

var xxx_messageInfo_DataModel proto.InternalMessageInfo

func (m *DataModel) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DataModel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DataModel) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DataModel) GetWhere() WhereType {
	if m != nil {
		return m.Where
	}
	return WhereType_CACHE
}

func init() {
	proto.RegisterEnum("WhereType", WhereType_name, WhereType_value)
	proto.RegisterType((*NameReq)(nil), "NameReq")
	proto.RegisterType((*NameResp)(nil), "NameResp")
	proto.RegisterType((*DataModel)(nil), "DataModel")
}

func init() { proto.RegisterFile("proto/call.proto", fileDescriptor_6ec13d8191abce58) }

var fileDescriptor_6ec13d8191abce58 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xed, 0xfe, 0xe7, 0xa0, 0xa3, 0x04, 0x91, 0xb2, 0x0b, 0xd9, 0x86, 0xc8, 0xd8, 0x45,
	0x07, 0xf5, 0x09, 0xa4, 0x9b, 0xf3, 0xc6, 0x3f, 0xb4, 0x05, 0xaf, 0xe3, 0x3c, 0x30, 0x30, 0x35,
	0x33, 0xcd, 0xa6, 0x7d, 0x12, 0xaf, 0x7c, 0x16, 0x5f, 0x4d, 0xd2, 0x84, 0x32, 0x04, 0x3b, 0xc1,
	0xdd, 0x7d, 0xdf, 0xd7, 0x2f, 0xe9, 0xf9, 0x1d, 0x08, 0xb8, 0x2b, 0x29, 0x94, 0x98, 0x2c, 0x18,
	0xe7, 0x7e, 0x21, 0x87, 0x04, 0xda, 0xb7, 0x2c, 0xc5, 0x08, 0x5f, 0x87, 0x01, 0x74, 0x8c, 0xcc,
	0x56, 0x94, 0x42, 0xe3, 0x85, 0xa5, 0xe8, 0x39, 0x7d, 0x67, 0x44, 0xa2, 0x42, 0xeb, 0x6c, 0x29,
	0x32, 0xe5, 0xd5, 0x4c, 0xa6, 0xf5, 0x30, 0x05, 0x32, 0x65, 0x8a, 0xdd, 0x88, 0x27, 0xe4, 0xd4,
	0x85, 0xfa, 0x33, 0xe6, 0xf6, 0x8c, 0x96, 0xf4, 0x18, 0x9a, 0x1b, 0xc6, 0xd7, 0x68, 0xcf, 0x18,
	0x43, 0x4f, 0xa0, 0x95, 0x29, 0xa6, 0xd6, 0x99, 0x57, 0x2f, 0x62, 0xeb, 0x68, 0x1f, 0x9a, 0x6f,
	0x4b, 0x94, 0xe8, 0x35, 0xfa, 0xce, 0xa8, 0x1b, 0x80, 0xff, 0xa0, 0x5d, 0x92, 0xaf, 0x30, 0x32,
	0x1f, 0xc6, 0x03, 0x20, 0x65, 0x46, 0x09, 0x34, 0xc3, 0xcb, 0xf0, 0x7a, 0xe6, 0x1e, 0x68, 0x19,
	0x27, 0x77, 0xd1, 0xcc, 0x75, 0x82, 0xcf, 0x1a, 0x90, 0x90, 0x71, 0x7e, 0x2f, 0xc5, 0x7b, 0x4e,
	0x4f, 0xa1, 0x3d, 0x47, 0xa5, 0xb1, 0x68, 0xc7, 0xb7, 0xa0, 0x3d, 0xe2, 0x97, 0x9c, 0x63, 0x70,
	0xe7, 0xa8, 0x34, 0xc2, 0x95, 0x14, 0x69, 0xc8, 0x16, 0x4b, 0xa4, 0xe0, 0x97, 0x48, 0xbd, 0x2d,
	0xfd, 0xa3, 0x1b, 0x2b, 0x21, 0x7f, 0xef, 0x8e, 0xa0, 0x1b, 0x9b, 0x6e, 0x22, 0xaa, 0x6f, 0xdd,
	0x6e, 0x56, 0xdf, 0x39, 0x28, 0x58, 0xb4, 0xaf, 0xaa, 0xc4, 0xd5, 0x95, 0xe0, 0xcb, 0x31, 0xfb,
	0x31, 0x53, 0xed, 0xda, 0xcf, 0x1f, 0xfe, 0x79, 0x0e, 0x87, 0xb6, 0x92, 0x48, 0xb6, 0xc0, 0x7f,
	0xcc, 0x46, 0xcf, 0x00, 0xa6, 0xc8, 0x51, 0x61, 0x25, 0xc1, 0x04, 0x8e, 0x4a, 0x80, 0x18, 0xe5,
	0x66, 0x17, 0x44, 0xf0, 0x61, 0x91, 0xcd, 0x7a, 0xf7, 0x80, 0xbc, 0x2f, 0x94, 0xc7, 0x56, 0xf1,
	0x08, 0x2f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xf2, 0xf6, 0xed, 0x98, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CallProxyClient is the client API for CallProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallProxyClient interface {
	GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error)
	GetDataFromCache(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	GetDataFromStore(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	SetDataToCache(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	SetDataToStore(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	// get from cache, if cache null, continue get store
	GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	// delete cache, update store
	SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
}

type callProxyClient struct {
	cc *grpc.ClientConn
}

func NewCallProxyClient(cc *grpc.ClientConn) CallProxyClient {
	return &callProxyClient{cc}
}

func (c *callProxyClient) GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/CallProxy/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) GetDataFromCache(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/GetDataFromCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) GetDataFromStore(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/GetDataFromStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) SetDataToCache(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/SetDataToCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) SetDataToStore(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/SetDataToStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callProxyClient) SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallProxy/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallProxyServer is the server API for CallProxy service.
type CallProxyServer interface {
	GetName(context.Context, *NameReq) (*NameResp, error)
	GetDataFromCache(context.Context, *DataModel) (*DataModel, error)
	GetDataFromStore(context.Context, *DataModel) (*DataModel, error)
	SetDataToCache(context.Context, *DataModel) (*DataModel, error)
	SetDataToStore(context.Context, *DataModel) (*DataModel, error)
	// get from cache, if cache null, continue get store
	GetData(context.Context, *DataModel) (*DataModel, error)
	// delete cache, update store
	SetData(context.Context, *DataModel) (*DataModel, error)
}

func RegisterCallProxyServer(s *grpc.Server, srv CallProxyServer) {
	s.RegisterService(&_CallProxy_serviceDesc, srv)
}

func _CallProxy_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).GetName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_GetDataFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).GetDataFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/GetDataFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).GetDataFromCache(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_GetDataFromStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).GetDataFromStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/GetDataFromStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).GetDataFromStore(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_SetDataToCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).SetDataToCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/SetDataToCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).SetDataToCache(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_SetDataToStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).SetDataToStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/SetDataToStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).SetDataToStore(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).GetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallProxy_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallProxyServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallProxy/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallProxyServer).SetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CallProxy",
	HandlerType: (*CallProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _CallProxy_GetName_Handler,
		},
		{
			MethodName: "GetDataFromCache",
			Handler:    _CallProxy_GetDataFromCache_Handler,
		},
		{
			MethodName: "GetDataFromStore",
			Handler:    _CallProxy_GetDataFromStore_Handler,
		},
		{
			MethodName: "SetDataToCache",
			Handler:    _CallProxy_SetDataToCache_Handler,
		},
		{
			MethodName: "SetDataToStore",
			Handler:    _CallProxy_SetDataToStore_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _CallProxy_GetData_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _CallProxy_SetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/call.proto",
}

// CallCacheClient is the client API for CallCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallCacheClient interface {
	GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error)
	GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	GetDataTrace(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	DeleteData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
}

type callCacheClient struct {
	cc *grpc.ClientConn
}

func NewCallCacheClient(cc *grpc.ClientConn) CallCacheClient {
	return &callCacheClient{cc}
}

func (c *callCacheClient) GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/CallCache/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callCacheClient) GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallCache/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callCacheClient) GetDataTrace(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallCache/GetDataTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callCacheClient) SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallCache/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callCacheClient) DeleteData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallCache/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallCacheServer is the server API for CallCache service.
type CallCacheServer interface {
	GetName(context.Context, *NameReq) (*NameResp, error)
	GetData(context.Context, *DataModel) (*DataModel, error)
	GetDataTrace(context.Context, *DataModel) (*DataModel, error)
	SetData(context.Context, *DataModel) (*DataModel, error)
	DeleteData(context.Context, *DataModel) (*DataModel, error)
}

func RegisterCallCacheServer(s *grpc.Server, srv CallCacheServer) {
	s.RegisterService(&_CallCache_serviceDesc, srv)
}

func _CallCache_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCache/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServer).GetName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallCache_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCache/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServer).GetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallCache_GetDataTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServer).GetDataTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCache/GetDataTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServer).GetDataTrace(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallCache_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCache/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServer).SetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallCache_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCache/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServer).DeleteData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CallCache",
	HandlerType: (*CallCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _CallCache_GetName_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _CallCache_GetData_Handler,
		},
		{
			MethodName: "GetDataTrace",
			Handler:    _CallCache_GetDataTrace_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _CallCache_SetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _CallCache_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/call.proto",
}

// CallCacheServClient is the client API for CallCacheServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallCacheServClient interface {
	GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error)
}

type callCacheServClient struct {
	cc *grpc.ClientConn
}

func NewCallCacheServClient(cc *grpc.ClientConn) CallCacheServClient {
	return &callCacheServClient{cc}
}

func (c *callCacheServClient) GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/CallCacheServ/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallCacheServServer is the server API for CallCacheServ service.
type CallCacheServServer interface {
	GetName(context.Context, *NameReq) (*NameResp, error)
}

func RegisterCallCacheServServer(s *grpc.Server, srv CallCacheServServer) {
	s.RegisterService(&_CallCacheServ_serviceDesc, srv)
}

func _CallCacheServ_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCacheServServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCacheServ/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCacheServServer).GetName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallCacheServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CallCacheServ",
	HandlerType: (*CallCacheServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _CallCacheServ_GetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/call.proto",
}

// CallStoreClient is the client API for CallStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallStoreClient interface {
	GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error)
	GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
	DeleteData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error)
}

type callStoreClient struct {
	cc *grpc.ClientConn
}

func NewCallStoreClient(cc *grpc.ClientConn) CallStoreClient {
	return &callStoreClient{cc}
}

func (c *callStoreClient) GetName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/CallStore/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callStoreClient) GetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallStore/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callStoreClient) SetData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallStore/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callStoreClient) DeleteData(ctx context.Context, in *DataModel, opts ...grpc.CallOption) (*DataModel, error) {
	out := new(DataModel)
	err := c.cc.Invoke(ctx, "/CallStore/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallStoreServer is the server API for CallStore service.
type CallStoreServer interface {
	GetName(context.Context, *NameReq) (*NameResp, error)
	GetData(context.Context, *DataModel) (*DataModel, error)
	SetData(context.Context, *DataModel) (*DataModel, error)
	DeleteData(context.Context, *DataModel) (*DataModel, error)
}

func RegisterCallStoreServer(s *grpc.Server, srv CallStoreServer) {
	s.RegisterService(&_CallStore_serviceDesc, srv)
}

func _CallStore_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallStoreServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallStore/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallStoreServer).GetName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallStore_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallStoreServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallStore/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallStoreServer).GetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallStore_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallStoreServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallStore/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallStoreServer).SetData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallStore_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallStoreServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallStore/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallStoreServer).DeleteData(ctx, req.(*DataModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _CallStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CallStore",
	HandlerType: (*CallStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _CallStore_GetName_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _CallStore_GetData_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _CallStore_SetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _CallStore_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/call.proto",
}
